I"9<blockquote>
  <p>Apple 에서 공개한 <a href="https://docs.swift.org/swift-book/">The Swift Programming Language (Swift 5.2)</a> 책의 <a href="https://docs.swift.org/swift-book/LanguageGuide/Initialization.html">Initialization</a> 부분<sup id="fnref:Initialization" role="doc-noteref"><a href="#fn:Initialization" class="footnote">1</a></sup>을 번역하고 정리한 글입니다.</p>

  <p>현재 전체 중에서 번역 완료된 목록은 <a href="/swift/programming/language/grammar/2017/02/28/The-Swift-Programming-Language.html">Swift 5.2: Swift Programming Language (스위프트 프로그래밍 언어)</a> 에서 확인할 수 있습니다.</p>
</blockquote>

<h2 id="initialization-객체-초기화하기">Initialization (객체 초기화하기)</h2>

<h3 id="setting-initial-values-for-stored-properties-저장-속성을-위한-기본-설정-값-설정하기">Setting Initial Values for Stored Properties (저장 속성을 위한 기본 설정 값 설정하기)</h3>

<h4 id="initializers-초기자">Initializers (초기자)</h4>

<h4 id="default-property-values-기본-속성-값">Default Property Values (기본 속성 값)</h4>

<h3 id="customizing-initialization-자기만의-초기화-방법-만들기">Customizing Initialization (자기만의 초기화 방법 만들기)</h3>

<h4 id="initialization-parameters-초기화-매개-변수">Initialization Parameters (초기화 매개 변수)</h4>

<h4 id="parameter-names-and-argument-labels-매개-변수-이름과-인자-이름표">Parameter Names and Argument Labels (매개 변수 이름과 인자 이름표)</h4>

<h4 id="initializer-parameters-without-argument-labels-인자-이름표가-없는-초기자-매개-변수">Initializer Parameters Without Argument Labels (인자 이름표가 없는 초기자 매개 변수)</h4>

<h4 id="optional-property-types-옵셔널-속성-타입">Optional Property Types (옵셔널 속성 타입)</h4>

<h4 id="assigning-constant-properties-during-initialization-초기화하는-동안-상수-속성-할당하기">Assigning Constant Properties During Initialization (초기화하는 동안 상수 속성 할당하기)</h4>

<h3 id="default-initializers-기본-설정-초기자">Default Initializers (기본 설정 초기자)</h3>

<p>스위프트는 어떤 구조체나 클래스가 모든 속성에 대한 ‘기본 설정 값 (default values)’ 을 제공하면서도 스스로는 단 하나의 초기자도 제공하지 않을 경우 ‘<em>기본 설정 초기자 (default initializer)</em>’ 를 제공합니다. ‘기본 설정 초기자’ 는 새로운 인스턴스를 생성할 때 모든 속성을 단순히 ‘기본 설정 값’ 으로 설정합니다.</p>

<p>다음 예제는 <code class="highlighter-rouge">ShoppingListItem</code> 이라는 클래스를 정의하여, 구매 목록의 각 항목에 대한 ‘이름’, ‘수량’, 그리고 ‘구매 상태 (purchase state)’ 를 담아둡니다:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">ShoppingListItem</span> <span class="p">{</span>
  <span class="k">var</span> <span class="nv">name</span><span class="p">:</span> <span class="kt">String</span><span class="p">?</span>
  <span class="k">var</span> <span class="nv">quantity</span> <span class="o">=</span> <span class="mi">1</span>
  <span class="k">var</span> <span class="nv">purchased</span> <span class="o">=</span> <span class="kc">false</span>
<span class="p">}</span>
<span class="k">var</span> <span class="nv">item</span> <span class="o">=</span> <span class="kt">ShoppingListItem</span><span class="p">()</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">ShoppingListItem</code> 클래스는 모든 속성이 ‘기본 설정 값’ 을 가지고 있고, 상위 클래스가 없는 ‘기본 클래스 (base class)’ 이므로, 자동적으로 ‘기본 설정 초기자’ 구현을 가지며 이로써 새 인스턴스를 생성할 때 모든 속성을 ‘기본 설정 값’ 으로 설정할 수 있습니다. (<code class="highlighter-rouge">name</code> 속성은 ‘옵셔널 (optional)’ <code class="highlighter-rouge">String</code> 속성이므로, 자동적으로 <code class="highlighter-rouge">nil</code> 이라는 ‘기본 설정 값’ 을 가지므로, 이 값을 코드에 굳이 안써도 됩니다.) 위의 예제는 <code class="highlighter-rouge">ShoppingListItem</code> 클래스의 ‘기본 설정 초기자’ 를 사용하여 새 인스턴스를 생성하면서, <code class="highlighter-rouge">ShoppingListItem()</code> 와 같이, ‘초기자 구문 표현 (initializer syntax)’ 를 썼으며, 이 새 인스턴스를 <code class="highlighter-rouge">item</code> 이라는 변수에 할당했습니다.</p>

<h3 id="memberwise-initializers-for-structure-types-구조체-타입을-위한-멤버-초기자">Memberwise Initializers for Structure Types (구조체 타입을 위한 멤버 초기자)</h3>

<p>구조체 타입은 자기 스스로 어떤 초기자도 직접 정의하고 있지 않을 경우 자동적으로 ‘<em>멤버 초기자 (memberwise initializer)</em>’ 를 가지게 됩니다. ‘기본 설정 초기자’ 와는 달리, 구조체의 ‘저장 속성 (stored properties)’ 에 ‘기본 설정 값’ 이 없어도 ‘멤버 초기자’ 는 가집니다.</p>

<p>‘멤버 초기자’ 는 새로운 구조체 인스턴스의 멤버 속성을 초기화하는 ‘약칭법 (shorthand way)’ 에 해당합니다. 새 인스턴스의 속성에 대한 ‘초기 값’ 을 ‘멤버 초기자’ 에 전달하려면 이름을 사용하면 됩니다.</p>

<p>아래 예제는 <code class="highlighter-rouge">width</code> 와 <code class="highlighter-rouge">height</code> 라는 두 속성을 가지는 <code class="highlighter-rouge">Size</code> 라는 구조체를 정의합니다. 두 속성 모두 ‘기본 설정 값’ 이 <code class="highlighter-rouge">0.0</code> 으로 할당되므로 타입은 <code class="highlighter-rouge">Double</code> 로 추론됩니다.</p>

<p><code class="highlighter-rouge">Size</code> 구조체는 자동적으로 <code class="highlighter-rouge">init(width:height:)</code> 멤버 초기자를 가지게 되므로, 이것을 써서 새 <code class="highlighter-rouge">Size</code> 인스턴스를 초기화할 수 있습니다:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">struct</span> <span class="kt">Size</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">width</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">,</span> <span class="n">height</span> <span class="o">=</span> <span class="mf">0.0</span>
<span class="p">}</span>
<span class="k">let</span> <span class="nv">twoByTwo</span> <span class="o">=</span> <span class="kt">Size</span><span class="p">(</span><span class="nv">width</span><span class="p">:</span> <span class="mf">2.0</span><span class="p">,</span> <span class="nv">height</span><span class="p">:</span> <span class="mf">2.0</span><span class="p">)</span>
</code></pre></div></div>

<p>멤버 초기자를 호출할 때, 기본 속성을 가지고 있는 속성은 그 값을 생략할 수도 있습니다. 위의 예에서, <code class="highlighter-rouge">Size</code> 구조체의 <code class="highlighter-rouge">height</code> 와 <code class="highlighter-rouge">width</code> 속성은 둘 다 ‘기본 설정 값’ 을 가지고 있습니다. 따라서 둘 중 하나 또는 두 속성 모두 생략할 수 있으며, 생략된 것은 ‘기본 설정 값’ 으로 초기화 됩니다-예를 들면 다음과 같습니다:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">zeroByTwo</span> <span class="o">=</span> <span class="kt">Size</span><span class="p">(</span><span class="nv">height</span><span class="p">:</span> <span class="mf">2.0</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">zeroByTwo</span><span class="o">.</span><span class="n">width</span><span class="p">,</span> <span class="n">zeroByTwo</span><span class="o">.</span><span class="n">height</span><span class="p">)</span>
<span class="c1">// "0.0 2.0" 를 출력합니다.</span>

<span class="k">let</span> <span class="nv">zeroByZero</span> <span class="o">=</span> <span class="kt">Size</span><span class="p">()</span>
<span class="nf">print</span><span class="p">(</span><span class="n">zeroByZero</span><span class="o">.</span><span class="n">width</span><span class="p">,</span> <span class="n">zeroByZero</span><span class="o">.</span><span class="n">height</span><span class="p">)</span>
<span class="c1">// "0.0 0.0" 를 출력합니다.</span>
</code></pre></div></div>

<h3 id="initial-delegation-for-value-types-값-타입을-위한-초기화-위임하기">Initial Delegation for Value Types (값 타입을 위한 초기화 위임하기)</h3>

<h3 id="class-inheritance-and-initialization-클래스-상속과-초기화">Class Inheritance and Initialization (클래스 상속과 초기화)</h3>

<h4 id="designated-initializers-and-convenience-initializers-지명-초기자-와-편의-초기자">Designated Initializers and Convenience Initializers (‘지명 초기자’ 와 ‘편의 초기자’)</h4>

<h4 id="syntax-for-designated-and-convenience-initializers-지명-초기자-와-편의-초기자-의-구문-표현">Syntax for Designated and Convenience Initializers (‘지명 초기자’ 와 ‘편의 초기자’ 의 구문 표현)</h4>

<h4 id="initializer-delegation-for-class-type-클래스-타입을-위한-초기자-위임하기">Initializer Delegation for Class Type (클래스 타입을 위한 초기자 위임하기)</h4>

<p><strong>Rule 1 (규칙 1)</strong></p>

<p><strong>Rule 2 (규칙 2)</strong></p>

<p><strong>Rule 3 (규칙 3)</strong></p>

<h4 id="two-phase-initialization-초기화의-두-단계">Two-Phase Initialization (초기화의 두-단계)</h4>

<p><strong>Safety Check 1 (안전성 검사 1)</strong></p>

<p><strong>Safety Check 2 (안전성 검사 2)</strong></p>

<p><strong>Safety Check 3 (안전성 검사 3)</strong></p>

<p><strong>Safety Check 4 (안전성 검사 4)</strong></p>

<p><strong>Phase 1 (단계 1)</strong></p>

<p><strong>Phase 2 (단계 2)</strong></p>

<h4 id="initializer-inheritance-and-overriding-초기자-상속과-재정의">Initializer Inheritance and Overriding (초기자 상속과 재정의)</h4>

<h4 id="automatic-initializer-inheritance-자동적인-초기자-상속">Automatic Initializer Inheritance (자동적인 초기자 상속)</h4>

<p>앞서 언급한 대로, 하위 클래스는 기본적으로 상위 클래스의 초기자를 상속받지 않습니다. 하지만, 지정된 조건을 만족할 경우에는 상위 클래스의 초기자를 자동적으로 상속 <em>받습니다. (are)</em>. 실제로, 이것은 일반적인 많은 상황에서 초기자를 ‘재정의 (override)’ 할 필요는 없으며, 안전하기만 하다면 언제든 최소한의 노력으로 상위 클래스의 초기자를 상속받을 수 있다는 것을 의미합니다.</p>

<p>‘하위 클래스’ 에서 새로 도입한 모든 속성에 대해 ‘기본 설정 값’ 을 제공한다고 가정하면, 다음의 두 규칙이 적용됩니다:</p>

<p><strong>규칙 1</strong></p>

<p>하위 클래스에서 어떤 ‘지명 초기자 (designated Initializer)’ 도 정의하지 않았을 경우, 상위 클래스의 모든 ‘지명 초기자’ 를 자동으로 상속받습니다.</p>

<p><strong>규칙 2</strong></p>

<p>하위 클래스에서 상위 클래스의 ‘지명 초기자’ 에 대한 모든 구현을 제공할 경우-‘규칙 1’ 에 의해서 상속을 받았든, 정의하면서 직접 구현을 제공했든 상관없이-이 때는 상위 클래스의 모든 ‘편의 초기자 (convenience Initializers)’ 를 자동으로 상속받습니다.</p>

<p>이 규칙은 하위 클래스에서 ‘편의 초기자’ 를 더 추가했어도 그대로 적용됩니다.</p>

<blockquote>
  <p>‘규칙 2’ 를 만족하기 위한 방편으로, 상위 클래스의 ‘지명 초기자’ 를 하위 클래스에서 ‘편의 초기자’ 의 형태로 구현할 수도 있습니다.</p>
</blockquote>

<h4 id="designated-and-convenience-initialization-in-action-지명-초기자-와-편의-초기자-의-실제-사례">Designated and Convenience Initialization in Action (‘지명 초기자’ 와 ‘편의 초기자’ 의 실제 사례)</h4>

<h3 id="failable-initializers-실패-가능한-초기자">Failable Initializers (실패 가능한 초기자)</h3>

<h4 id="failable-initializers-for-enumerations-열거체를-위한-실패-가능한-초기자">Failable Initializers for Enumerations (열거체를 위한 실패 가능한 초기자)</h4>

<h4 id="failable-initializers-for-enumerations-with-raw-values-원시-값을-갖는-열거체를-위한-실패-가능한-초기자">Failable Initializers for Enumerations with Raw Values (원시 값을 갖는 열거체를 위한 실패 가능한 초기자)</h4>

<h4 id="propagation-of-initialization-failure-초기화-실패의-전파">Propagation of Initialization Failure (초기화 실패의 전파)</h4>

<h4 id="overriding-a-failable-initializer-실패-가능한-초기자-재정의하기">Overriding a Failable Initializer (실패 가능한 초기자 재정의하기)</h4>

<h4 id="the-init-failable-initializer-init-실패-가능한-초기자">The <code class="highlighter-rouge">init!</code> Failable Initializer (<code class="highlighter-rouge">init!</code> 실패 가능한 초기자)</h4>

<h3 id="required-initializers-필수-초기자">Required Initializers (필수 초기자)</h3>

<h3 id="setting-a-default-property-value-with-a-closure-or-function-클로저나-함수를-사용하여-기본-속성-값-설정하기">Setting a Default Property Value with a Closure or Function (클로저나 함수를 사용하여 기본 속성 값 설정하기)</h3>

<h3 id="참고-자료">참고 자료</h3>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:Initialization" role="doc-endnote">
      <p>원문은 <a href="https://docs.swift.org/swift-book/LanguageGuide/Initialization.html">Initialization</a> 에서 확인할 수 있습니다. <a href="#fnref:Initialization" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>
:ET