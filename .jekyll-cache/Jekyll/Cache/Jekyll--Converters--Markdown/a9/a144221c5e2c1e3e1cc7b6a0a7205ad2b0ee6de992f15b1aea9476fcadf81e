I"3H<blockquote>
  <p>Apple 에서 공개한 <a href="https://docs.swift.org/swift-book/">The Swift Programming Language (Swift 5.2)</a> 책의 <a href="https://docs.swift.org/swift-book/LanguageGuide/Deinitialization.html">Deinitialization</a> 부분<sup id="fnref:Deinitialization" role="doc-noteref"><a href="#fn:Deinitialization" class="footnote">1</a></sup>을 번역하고 정리한 글입니다.</p>

  <p>현재 전체 중에서 번역 완료된 목록은 <a href="http://xho95.github.io/swift/programming/language/grammar/2017/02/27/The-Swift-Programming-Language.html">Swift 5.2: Swift Programming Language (스위프트 프로그래밍 언어)</a> 에서 확인할 수 있습니다.</p>
</blockquote>

<h2 id="deinitialization-객체-정리하기">Deinitialization (객체 정리하기)</h2>

<p><em>정리자 (deinitializer)</em><sup id="fnref:deinitializer" role="doc-noteref"><a href="#fn:deinitializer" class="footnote">2</a></sup> 는 객체 인스턴스가 해제 (deallocated)<sup id="fnref:deallocated" role="doc-noteref"><a href="#fn:deallocated" class="footnote">3</a></sup> 되기 바로 전에 호출됩니다. ‘정리자’ 는 <code class="highlighter-rouge">deinit</code> 키워드로 작성하며, ‘초기자 (initializer)’ 를 <code class="highlighter-rouge">init</code> 키워드로 작성하는 것과 비슷하다고 보면 됩니다. ‘정리자’ 는 ‘클래스 타입 (class types)’ 에만 사용 가능합니다.<sup id="fnref:class-types" role="doc-noteref"><a href="#fn:class-types" class="footnote">4</a></sup></p>

<h3 id="how-deinitialization-works-정리자의-작동-방식">How Deinitialization Works (정리자의 작동 방식)</h3>

<p>스위프트는 자원을 확보하기 위해 필요 없는 인스턴스는 자동으로 해제합니다.<sup id="fnref:free-up" role="doc-noteref"><a href="#fn:free-up" class="footnote">5</a></sup> 스위프트에서 인스턴스의 메모리 관리를 처리하는 곳은 ‘자동 참조 카운팅 (ARC; automatic reference counting)’ 이며, 이는 <a href="https://docs.swift.org/swift-book/LanguageGuide/AutomaticReferenceCounting.html">Automatic Reference Counting (자동 참조 카운팅)</a> 에서 설명하도록 합니다. 일반적으로는 인스턴스가 해제된다고 해서 정리 작업을 수동으로 따로 할 일은 없습니다. 하지만, 작업하면서 자기 자신의 자원을 사용하는 경우, 직접 추가 정리 작업을 해야할 수도 있습니다. 예를 들어, 직접 만든 클래스로 어떤 파일을 열고 거기다 뭔가를 썼을 경우, 클래스 인스턴스가 해제되기 전에 그 파일을 직접 닫을 필요가 있습니다.</p>

<p>‘클래스 정의 (class definitions)’ 는 클래스 당 최대 한 개의 ‘정리자’ 만 가집니다. 정리자는 매개 변수를 가지지 않아서 괄호도 쓰지 않습니다:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">deinit</span> <span class="p">{</span>
    <span class="c1">// 여기서 정리 작업을 수행합니다.</span>
<span class="p">}</span>
</code></pre></div></div>

<p>정리자는 인스턴스의 해제가 일어나기 바로 전에 자동으로 호출됩니다. 정리자를 직접 호출하는 것은 안됩니다. ‘상위 클래스 (supperclass)’ 의 정리자는 ‘하위 클래스 (subclasses)’ 로 상속되며, ‘상위 클래스 정리자’ 는 ‘하위 클래스 정리자’ 의 구현부 끝에서 자동으로 호출됩니다. ‘상위 클래스 정리자’ 는 항상 호출되는 것으로, 심지어 하위 클래스가 자신의 정리자를 제공하지 않는 경우에도 호출됩니다.</p>

<p>정리자의 호출이 끝나기 전에는 인스턴스가 해제되지 않으므로, 정리자는 자기를 호출한 인스턴스의 모든 속성에 접근할 수 있으며 해당 속성에 기초하여 행동을 수정할 수 있습니다. (가령 닫아야 할 파일을 이름으로 조회하는 것 등이 가능합니다.)</p>

<h3 id="deinitializers-in-action-정리자의-실제-사례">Deinitializers in Action (정리자의 실제 사례)</h3>

<p>다음 예제는 정리자의 실제 사례입니다. 이 예제에서는 간단한 게임을 위해 두개의 새로운 타입인 <code class="highlighter-rouge">Bank</code> 와 <code class="highlighter-rouge">Player</code> 를 정의했습니다. <code class="highlighter-rouge">Bank</code> 클래스는 가상의 통화를 관리하는데 유통되는 동전이 절대로 10,000 개를 넘지 않도록 합니다. 이 게임에는 단 하나의 <code class="highlighter-rouge">Bank</code> 만 있으므로, <code class="highlighter-rouge">Bank</code> 는 ‘타입 속성’ 과 ‘타입 메소드’ 를 가지는 클래스로 구현하여 현재 상태를 저장하고 관리합니다<sup id="fnref:Bank-class" role="doc-noteref"><a href="#fn:Bank-class" class="footnote">6</a></sup>:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">Bank</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="k">var</span> <span class="nv">coinsInBank</span> <span class="o">=</span> <span class="mi">10_000</span>
    <span class="kd">static</span> <span class="kd">func</span> <span class="nf">distribute</span><span class="p">(</span><span class="n">coins</span> <span class="nv">numberOfCoinsRequested</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">numberOfCoinsToVend</span> <span class="o">=</span> <span class="nf">min</span><span class="p">(</span><span class="n">numberOfCoinsRequested</span><span class="p">,</span> <span class="n">coinsInBank</span><span class="p">)</span>
        <span class="n">coinsInBank</span> <span class="o">-=</span> <span class="n">numberOfCoinsToVend</span>
        <span class="k">return</span> <span class="n">numberOfCoinsToVend</span>
    <span class="p">}</span>
    <span class="kd">static</span> <span class="kd">func</span> <span class="nf">receive</span><span class="p">(</span><span class="nv">coins</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">coinsInBank</span> <span class="o">+=</span> <span class="n">coins</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">Bank</code> 에는 현재 보유하고 있는 동전 수를 추적하기 위한 <code class="highlighter-rouge">coinsInBank</code> 이 있습니다. 또 동전의 분배와 수집을 처리하기 위한 두 개의 메소드 (<code class="highlighter-rouge">distribute(coins:)</code> 와 <code class="highlighter-rouge">receive(coins:)</code>) 를 제공합니다.</p>

<p><code class="highlighter-rouge">distribute(coins:)</code> 메소드는 분배하기 전에 은행에 동전이 충분히 있는 지 검사합니다. 동전이 충분하지 않으면, <code class="highlighter-rouge">Bank</code> 는 요청받은 개수보다 적은 개수를 반환합니다. (은행에 남은 동전이 없으면 0 을 반환합니다). 반환하는 정수 값은 실제 제공되는 동전의 수를 나타냅니다.</p>

<p><code class="highlighter-rouge">receive(coins:)</code> 메소드는 받은 동전의 개수를 다시 은행의 동전 창고 (store) 에 더하는 것으로 끝납니다.</p>

<p><code class="highlighter-rouge">Player</code> 클래스는 게임에 있는 ‘참여자 (player)’ 를 묘사합니다. 각각의 참여자는 언제든지 지갑에 일정 수의 동전을 저장할 수 있습니다. 이는 참여자의 <code class="highlighter-rouge">coinsInPurse</code> 속성으로 나타냅니다:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">Player</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">coinsInPurse</span><span class="p">:</span> <span class="kt">Int</span>
    <span class="nf">init</span><span class="p">(</span><span class="nv">coins</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">coinsInPurse</span> <span class="o">=</span> <span class="kt">Bank</span><span class="o">.</span><span class="nf">distribute</span><span class="p">(</span><span class="nv">coins</span><span class="p">:</span> <span class="n">coins</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="kd">func</span> <span class="nf">win</span><span class="p">(</span><span class="nv">coins</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">coinsInPurse</span> <span class="o">+=</span> <span class="kt">Bank</span><span class="o">.</span><span class="nf">distribute</span><span class="p">(</span><span class="nv">coins</span><span class="p">:</span> <span class="n">coins</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="kd">deinit</span> <span class="p">{</span>
        <span class="kt">Bank</span><span class="o">.</span><span class="nf">receive</span><span class="p">(</span><span class="nv">coins</span><span class="p">:</span> <span class="n">coinsInPurse</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>각 <code class="highlighter-rouge">Player</code> 인스턴스는 초기화할 때 은행에서 지정한 동전 개수만큼의 ‘초기 할당량 (staring allowance)’ 으로 초기화 되는데, 동전이 충분하지 않으면 특정 <code class="highlighter-rouge">Player</code> 인스턴스는 그보다 적은 개수를 가지게 될 수도 있습니다.</p>

<p><code class="highlighter-rouge">Player</code> 클래스는 <code class="highlighter-rouge">win(coins:)</code> 메소드를 정의하여, 은행에서 받은 특정 개수의 동전을 자기 지갑에 더합니다. <code class="highlighter-rouge">Player</code> 클래스는 ‘정리자’ 도 구현하며, 이는 <code class="highlighter-rouge">Player</code> 인스턴스가 해제되기 바로 직전에 호출됩니다. 여기서 정리자는 단순히 자신의 모든 동전을 은행에 반환합니다:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="nv">playerOne</span><span class="p">:</span> <span class="kt">Player</span><span class="p">?</span> <span class="o">=</span> <span class="kt">Player</span><span class="p">(</span><span class="nv">coins</span><span class="p">:</span> <span class="mi">100</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="s">"A new player has joined the game with </span><span class="se">\(</span><span class="n">playerOne</span><span class="o">!.</span><span class="n">coinsInPurse</span><span class="se">)</span><span class="s"> coins"</span><span class="p">)</span>
<span class="c1">// "A new player has joined the game with 100 coins" 를 출력합니다.</span>
<span class="nf">print</span><span class="p">(</span><span class="s">"There are now </span><span class="se">\(</span><span class="kt">Bank</span><span class="o">.</span><span class="n">coinsInBank</span><span class="se">)</span><span class="s"> coins left in the bank"</span><span class="p">)</span>
<span class="c1">// "There are now 9900 coins left in the bank" 를 출력합니다.</span>
</code></pre></div></div>

<p>새로운 <code class="highlighter-rouge">Player</code> 인스턴스를 생성하면서, 동전 100개가 가능한 지 요청합니다. 이어서 이 <code class="highlighter-rouge">Player</code> 인스턴스를 <code class="highlighter-rouge">playerOne</code> 이라는 ‘옵셔널 (optional) <code class="highlighter-rouge">Player</code>’ 변수에 저장합니다. 여기서 옵셔널 변수를 사용했는데, 참여자는 언제든지 게임을 떠날 수 있기 때문입니다. 옵셔널을 사용하면 현재 게임에 참여자가 있는지 없는지를 추적할 수 있습니다.</p>

<p><code class="highlighter-rouge">playerOne</code> 은 옵셔널이므로, <code class="highlighter-rouge">coinsInPurse</code> 속성에 접근해서 동전의 개수를 출력할 때나, <code class="highlighter-rouge">winCoins(_:)</code> 메소드를 호출할 때마다, 느낌표 (<code class="highlighter-rouge">!</code>) 를 붙여서 자격을 갖춰야 합니다:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">playerOne</span><span class="o">!.</span><span class="nf">win</span><span class="p">(</span><span class="nv">coins</span><span class="p">:</span> <span class="mi">2_000</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="s">"PlayerOne won 2000 coins &amp; now has </span><span class="se">\(</span><span class="n">playerOne</span><span class="o">!.</span><span class="n">coinsInPurse</span><span class="se">)</span><span class="s"> coins"</span><span class="p">)</span>
<span class="c1">// "PlayerOne won 2000 coins &amp; now has 2100 coins" 를 출력합니다.</span>
<span class="nf">print</span><span class="p">(</span><span class="s">"The bank now only has </span><span class="se">\(</span><span class="kt">Bank</span><span class="o">.</span><span class="n">coinsInBank</span><span class="se">)</span><span class="s"> coins left"</span><span class="p">)</span>
<span class="c1">// "The bank now only has 7900 coins left" 를 출력합니다.</span>
</code></pre></div></div>

<p>참여자가 승리해서 동전 2,000 개를 획득했습니다. 이제 참여자의 지갑에는 동전이 2,100 개 있으며, 은행에 남은 동전은 7,900 개 입니다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">playerOne</span> <span class="o">=</span> <span class="kc">nil</span>
<span class="nf">print</span><span class="p">(</span><span class="s">"PlayerOne has left the game"</span><span class="p">)</span>
<span class="c1">// "PlayerOne has left the game" 을 출력합니다.</span>
<span class="nf">print</span><span class="p">(</span><span class="s">"The bank now has </span><span class="se">\(</span><span class="kt">Bank</span><span class="o">.</span><span class="n">coinsInBank</span><span class="se">)</span><span class="s"> coins"</span><span class="p">)</span>
<span class="c1">// "The bank now has 10000 coins" 를 출력합니다.</span>
</code></pre></div></div>

<p>참여자가 방금 막 게임을 떠났습니다. 이는 ‘옵셔널 <code class="highlighter-rouge">playerOne</code>’ 변수를 (“<code class="highlighter-rouge">Player</code> 인스턴스가 없음” 을 의미하는) <code class="highlighter-rouge">nil</code> 로 설정하여 표현합니다. 이렇게 하면, <code class="highlighter-rouge">Player</code> 인스턴스를 가리키는 <code class="highlighter-rouge">playerOne</code> 변수의 참조가 끊어집니다. 어떤 다른 속성이나 변수도 <code class="highlighter-rouge">Player</code> 인스턴스를 참조하지 않으므로, 메모리 자원을 확보하기 위해 해제됩니다. 이 일이 일어나기 바로 전에, 정리자가 자동으로 호출되며, 동전은 은행으로 반환됩니다.</p>

<h3 id="참고-자료">참고 자료</h3>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:Deinitialization" role="doc-endnote">
      <p>이 글에 대한 원문은 <a href="https://docs.swift.org/swift-book/LanguageGuide/Deinitialization.html">Deinitialization</a> 에서 확인할 수 있습니다. <a href="#fnref:Deinitialization" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:deinitializer" role="doc-endnote">
      <p>스위프트의 ‘deinitializer’ 는 ‘정리자’ 라는 말로 옮겼는데, ‘initializer’ 를 ‘초기자’ 라고 옮긴 것과 짝을 맞추기 위함입니다. 이는 C++ 언어에서 ‘constructor’ 를 ‘생성자’, ‘destructor’ 를 ‘소멸자’ 라고 부르는 것에서 착안한 말입니다. 스위프트는 메모리 관리를 자동으로 알아서 해주는 언어라서 개발자가 직접 메모리 관리를 하지 않으므로 메모리 ‘생성’ 이나 ‘소멸’ 이라는 개념은 없습니다. 대신 스위프트에는 변수나 상수를 사용하려면 그전에 반드시 ‘초기화’ 를 해줘야 합니다. 그리고 변수나 상수가 사라지기 전에 ‘초기화’ 했던 자원을 정리할 필요가 있습니다. 이것이 ‘초기자’, ‘정리자’ 라는 단어를 선택한 이유입니다. <a href="#fnref:deinitializer" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:deallocated" role="doc-endnote">
      <p>여기서의 ‘deallocated’ 는 메모리상에서의 해제를 말하며, 스위프트에서는 ‘Auto Reference Counting’ 에 의해 자동으로 이루어집니다. <a href="#fnref:deallocated" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:class-types" role="doc-endnote">
      <p>이것이 이 글의 제목인 ‘deinitialization’ 을 ‘정리하기’ 가 아니라 ‘객체 정리하기’ 라고 옮긴 이유입니다. ‘정리’ 의 대상은 ‘class’ 일 때만 가능함을 알 수 있습니다. <a href="#fnref:class-types" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:free-up" role="doc-endnote">
      <p>여기서 자원을 ‘free up’ 하는 것을 운영 체제의 관점에서 자원을 ‘확보한다’ 는 말로 옮겼습니다. <a href="#fnref:free-up" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:Bank-class" role="doc-endnote">
      <p>이 예제에서의 <code class="highlighter-rouge">Bank</code> 클래스는 ‘singleton (싱글턴)’ 이라고 볼 수 있습니다. <a href="#fnref:Bank-class" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>
:ET