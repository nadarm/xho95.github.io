I"|G<blockquote>
  <p>Apple 에서 공개한 <a href="https://docs.swift.org/swift-book/">The Swift Programming Language (Swift 5.2)</a> 책의 <a href="https://docs.swift.org/swift-book/LanguageGuide/NestedTypes.html">Nested Types</a> 부분<sup id="fnref:Nested-Types" role="doc-noteref"><a href="#fn:Nested-Types" class="footnote">1</a></sup>을 번역하고 정리한 글입니다.</p>

  <p>현재 전체 중에서 번역 완료된 목록은 <a href="/swift/programming/language/grammar/2017/02/28/The-Swift-Programming-Language.html">Swift 5.2: Swift Programming Language (스위프트 프로그래밍 언어)</a> 에서 확인할 수 있습니다.</p>
</blockquote>

<h2 id="nested-types-품어진-타입">Nested Types (품어진 타입)</h2>

<p>열거체를 만드는 것은 대체로 클래스나 구조체의 특정 기능을 지원하기 위함입니다. 이와 비슷하게, 복잡한 타입의 영역 내에서만 사용되는 보조용 (utility)<sup id="fnref:utility" role="doc-noteref"><a href="#fn:utility" class="footnote">2</a></sup> 클래스와 구조체를 정의할 수 있다면 편리할 것입니다. 이를 위해, 스위프트에서는 <em>품어진 타입 (nested types)</em> 을 정의할 수 있으며, 이를 통해 지원할 타입의 정의 영역에서 ‘보조용 열거체, 클래스 및 구조체’<sup id="fnref:supporting-types" role="doc-noteref"><a href="#fn:supporting-types" class="footnote">3</a></sup> 를 품을 수 있습니다.</p>

<p>한 타입이 다른 타입 내에 품어지게 만드는 방법은, 그것의 정의를 지원할 타입의 외곽 중괄호 안에 작성하는 것입니다. 타입을 품는 단계는 원하는 만큼 많이 중첩할 수 있습니다.</p>

<h3 id="nested-types-in-action-품어진-타입의-실제-사례">Nested Types in Action (품어진 타입의 실제 사례)</h3>

<p>아래의 예제는 <code class="highlighter-rouge">BlackjackCard</code> 라는 구조체를 정의하여, ‘블랙잭 (Blackjack)’ 게임에서 사용할 플레이용 카드의 모델을 만듭니다. <code class="highlighter-rouge">BlackjackCard</code> 구조체는 <code class="highlighter-rouge">Suit</code> 와 <code class="highlighter-rouge">Rank</code> 라는 두 개의 ‘품어진 열거체 타입 (nested enumeration types)’ 을 가집니다.</p>

<p>블랙잭에서, 에이스 카드의 값은 ‘1’ 일 수도 있고 ‘11’ 일 수도 있습니다. 이러한 특징은 <code class="highlighter-rouge">Rank</code> 열거체 내에 품어진 <code class="highlighter-rouge">Values</code> 라는 구조체로 표현됩니다:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">struct</span> <span class="kt">BlackjackCard</span> <span class="p">{</span>

    <span class="c1">// 품어진 Suit 열거체</span>
    <span class="kd">enum</span> <span class="kt">Suit</span><span class="p">:</span> <span class="kt">Character</span> <span class="p">{</span>
        <span class="k">case</span> <span class="n">spades</span> <span class="o">=</span> <span class="s">"♠"</span><span class="p">,</span> <span class="n">hearts</span> <span class="o">=</span> <span class="s">"♡"</span><span class="p">,</span> <span class="n">diamonds</span> <span class="o">=</span> <span class="s">"♢"</span><span class="p">,</span> <span class="n">clubs</span> <span class="o">=</span> <span class="s">"♣"</span>
    <span class="p">}</span>

    <span class="c1">// 품어진 Rank 열거체</span>
    <span class="kd">enum</span> <span class="kt">Rank</span><span class="p">:</span> <span class="kt">Int</span> <span class="p">{</span>
        <span class="k">case</span> <span class="n">two</span> <span class="o">=</span> <span class="mi">2</span><span class="p">,</span> <span class="n">three</span><span class="p">,</span> <span class="n">four</span><span class="p">,</span> <span class="n">five</span><span class="p">,</span> <span class="n">six</span><span class="p">,</span> <span class="n">seven</span><span class="p">,</span> <span class="n">eight</span><span class="p">,</span> <span class="n">nine</span><span class="p">,</span> <span class="n">ten</span>
        <span class="k">case</span> <span class="n">jack</span><span class="p">,</span> <span class="n">queen</span><span class="p">,</span> <span class="n">king</span><span class="p">,</span> <span class="n">ace</span>
        <span class="kd">struct</span> <span class="kt">Values</span> <span class="p">{</span>
            <span class="k">let</span> <span class="nv">first</span><span class="p">:</span> <span class="kt">Int</span><span class="p">,</span> <span class="nv">second</span><span class="p">:</span> <span class="kt">Int</span><span class="p">?</span>
        <span class="p">}</span>
        <span class="k">var</span> <span class="nv">values</span><span class="p">:</span> <span class="kt">Values</span> <span class="p">{</span>
            <span class="k">switch</span> <span class="k">self</span> <span class="p">{</span>
            <span class="k">case</span> <span class="o">.</span><span class="nv">ace</span><span class="p">:</span>
                <span class="k">return</span> <span class="kt">Values</span><span class="p">(</span><span class="nv">first</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">second</span><span class="p">:</span> <span class="mi">11</span><span class="p">)</span>
            <span class="k">case</span> <span class="o">.</span><span class="n">jack</span><span class="p">,</span> <span class="o">.</span><span class="n">queen</span><span class="p">,</span> <span class="o">.</span><span class="nv">king</span><span class="p">:</span>
                <span class="k">return</span> <span class="kt">Values</span><span class="p">(</span><span class="nv">first</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span> <span class="nv">second</span><span class="p">:</span> <span class="kc">nil</span><span class="p">)</span>
            <span class="k">default</span><span class="p">:</span>
                <span class="k">return</span> <span class="kt">Values</span><span class="p">(</span><span class="nv">first</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">rawValue</span><span class="p">,</span> <span class="nv">second</span><span class="p">:</span> <span class="kc">nil</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// BlackjackCard 의 속성과 메소드</span>
    <span class="k">let</span> <span class="nv">rank</span><span class="p">:</span> <span class="kt">Rank</span><span class="p">,</span> <span class="nv">suit</span><span class="p">:</span> <span class="kt">Suit</span>
    <span class="k">var</span> <span class="nv">description</span><span class="p">:</span> <span class="kt">String</span> <span class="p">{</span>
        <span class="k">var</span> <span class="nv">output</span> <span class="o">=</span> <span class="s">"suit is </span><span class="se">\(</span><span class="n">suit</span><span class="o">.</span><span class="n">rawValue</span><span class="se">)</span><span class="s">,"</span>
        <span class="n">output</span> <span class="o">+=</span> <span class="s">" value is </span><span class="se">\(</span><span class="n">rank</span><span class="o">.</span><span class="n">values</span><span class="o">.</span><span class="n">first</span><span class="se">)</span><span class="s">"</span>
        <span class="k">if</span> <span class="k">let</span> <span class="nv">second</span> <span class="o">=</span> <span class="n">rank</span><span class="o">.</span><span class="n">values</span><span class="o">.</span><span class="n">second</span> <span class="p">{</span>
            <span class="n">output</span> <span class="o">+=</span> <span class="s">" or </span><span class="se">\(</span><span class="n">second</span><span class="se">)</span><span class="s">"</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">output</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">Suit</code> 열거체는 일반적인 플레이용 카드의 네가지 패<sup id="fnref:suits" role="doc-noteref"><a href="#fn:suits" class="footnote">4</a></sup>를 묘사하고 있으며, <code class="highlighter-rouge">Character</code> 타입의 ‘원시 값 (raw value)’<sup id="fnref:raw-value" role="doc-noteref"><a href="#fn:raw-value" class="footnote">5</a></sup> 으로 각 기호를 표현합니다.</p>

<p><code class="highlighter-rouge">Rank</code> 열거체는 플레이용 카드에서 가능한 13개의 계급을 묘사하고 있으며, <code class="highlighter-rouge">Int</code> 타입의 원시 값으로 카드 면에 나타날 값을 표현합니다. (이 <code class="highlighter-rouge">Int</code> 원시 값은 Jack, Queen, King 그리고 에이스 (Ace) 카드에는 사용하지 않습니다.)</p>

<p>위에서 언급한 대로, <code class="highlighter-rouge">Rank</code> 열거체는 <code class="highlighter-rouge">Values</code> 라는 한 단계 더 품어진 구조체를 정의합니다. 이 구조체는 거의 모든 카드는 하나의 값을 갖지만, 에이스 카드는 두 값을 가진다는 사실을 내부에 감춥니다. <code class="highlighter-rouge">Values</code> 구조체는 두 개의 속성을 정의하여 이를 나타냅니다:</p>

<ul>
  <li>속성 <code class="highlighter-rouge">first</code>, <code class="highlighter-rouge">Int</code> 타입임</li>
  <li>속성 <code class="highlighter-rouge">second</code>, <code class="highlighter-rouge">Int?</code> (또는 “옵셔널 <code class="highlighter-rouge">Int</code>”) 타입임</li>
</ul>

<p><code class="highlighter-rouge">Rank</code> 는 <code class="highlighter-rouge">Values</code> 구조체의 인스턴스를 반환하는 <code class="highlighter-rouge">values</code> 라는 ‘계산 속성 (computed property)’ 도 정의합니다. 이 계산 속성은 카드의 계급을 고려해서 새 <code class="highlighter-rouge">Values</code> 인스턴스를 계급에 맞는 값으로 초기화합니다. 이 때 <code class="highlighter-rouge">jack</code>, <code class="highlighter-rouge">queen</code>, <code class="highlighter-rouge">king</code>, 그리고 <code class="highlighter-rouge">ace</code> 에는 특별한 값을 사용합니다. 숫자 카드라면 그 계급에 해당하는 <code class="highlighter-rouge">Int</code> ‘원시 값 (raw value)’ 을 사용합니다.</p>

<p><code class="highlighter-rouge">BlackjackCard</code> 구조체 그 자신도 두 개의 속성-<code class="highlighter-rouge">rank</code> 와 <code class="highlighter-rouge">suit</code>-을 가집니다. 여기다 <code class="highlighter-rouge">description</code> 이라는 ‘계산 속성’ 도 정의하여, <code class="highlighter-rouge">rank</code> 와 <code class="highlighter-rouge">suit</code> 에 저장된 값으로 카드의 이름과 값에 대한 설명을 만들어 냅니다. <code class="highlighter-rouge">description</code> 속성은 ‘옵셔널 바인딩 (optional binding)’ 을 사용해서 표시할 두 번째 값이 있는 지 검사하며, 있다면 두 번째 값에 대한 추가 세부 설명을 덧붙입니다.</p>

<p><code class="highlighter-rouge">BlackjackCard</code> 는 따로 정의된 초기자가 없는 구조체 이므로, 저절로<sup id="fnref:implicit" role="doc-noteref"><a href="#fn:implicit" class="footnote">6</a></sup> 멤버 초기자를 가지며, 이는 <a href="https://docs.swift.org/swift-book/LanguageGuide/Initialization.html#ID214">Memberwise Initializers for Structure Types (구조체를 위한 멤버 초기자)</a> 에서 설명했습니다. 이 초기자로 다음과 같이 <code class="highlighter-rouge">theAceOfSpades</code> 라는 새로운 상수를 초기화할 수 있습니다:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">theAceOfSpades</span> <span class="o">=</span> <span class="kt">BlackjackCard</span><span class="p">(</span><span class="nv">rank</span><span class="p">:</span> <span class="o">.</span><span class="n">ace</span><span class="p">,</span> <span class="nv">suit</span><span class="p">:</span> <span class="o">.</span><span class="n">spades</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="s">"theAceOfSpades: </span><span class="se">\(</span><span class="n">theAceOfSpades</span><span class="o">.</span><span class="n">description</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
<span class="c1">// "theAceOfSpades: suit is ♠, value is 1 or 11" 를 출력합니다.</span>
</code></pre></div></div>

<p>Even though Rank and Suit are nested within BlackjackCard, their type can be inferred from context, and so the initialization of this instance is able to refer to the enumeration cases by their case names (.ace and .spades) alone. In the example above, the description property correctly reports that the Ace of Spades has a value of 1 or 11.</p>

<p><code class="highlighter-rouge">Rank</code> 와 <code class="highlighter-rouge">Suit</code> 는 <code class="highlighter-rouge">BlackjackCard</code> 안에 품어져 있지만, 이 타입은 문맥으로부터 추론할 수 있으며, 따라서 이 인스턴스를 초기화할 때는 ‘경우 값 (case)’ 의 이름 (<code class="highlighter-rouge">.ace</code> 와 <code class="highlighter-rouge">.spades</code>) 만으로도 구조체의 ‘경우 값들 (cases)’ 을 참조할 수 있습니다.<sup id="fnref:refer-to" role="doc-noteref"><a href="#fn:refer-to" class="footnote">7</a></sup> 위의 예제에서, <code class="highlighter-rouge">description</code> 속성은 ‘스페이드 에이스’ 의 값이 <code class="highlighter-rouge">1</code> 또는 <code class="highlighter-rouge">11</code> 임을 정확하게 보고합니다.</p>

<h3 id="referring-to-nested-types-품어진-타입-참조하기">Referring to Nested Types (품어진 타입 참조하기)</h3>

<p>‘품어진 타입 (nested type)’ 을 자신이 정의된 영역 밖에서 사용하려면, 이름 앞에 자신을 품고 있는 타입 이름을 접두사로 붙이면 됩니다:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">heartsSymbol</span> <span class="o">=</span> <span class="kt">BlackjackCard</span><span class="o">.</span><span class="kt">Suit</span><span class="o">.</span><span class="n">hearts</span><span class="o">.</span><span class="n">rawValue</span>
<span class="c1">// heartsSymbol 은 "♡" 입니다.</span>
</code></pre></div></div>

<p>위 예제를 보면, 이는 <code class="highlighter-rouge">Suit</code>, <code class="highlighter-rouge">Rank</code>, 그리고 <code class="highlighter-rouge">Values</code> 의 이름을 의식적으로 짧게 유지할 수 있게 해주는데, 이들의 이름이 정의된 영역에 의해 자연스럽게 ‘규명되기 (qualified)’ 때문입니다.</p>

<h3 id="참고-자료">참고 자료</h3>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:Nested-Types" role="doc-endnote">
      <p>이 글에 대한 원문은 <a href="https://docs.swift.org/swift-book/LanguageGuide/NestedTypes.html">Nested Types</a> 에서 확인할 수 있습니다. <a href="#fnref:Nested-Types" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:utility" role="doc-endnote">
      <p>‘utility’ 는 ‘실용적인, 다목적의’ 같은 의미를 가진 단어인데, 여기서는 하나의 큰 타입의 범위 내에서만 사용되는 것이라 ‘보조 용도로 사용된다는’ 의미를 강조해서 ‘보조용’ 으로 옮겼습니다. 컴퓨터의 용어로서 ‘utility’ 는 따로 적합한 단어를 찾기 어려운 것 같습니다. <a href="#fnref:utility" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:supporting-types" role="doc-endnote">
      <p>책에서는 ‘supporting enumerations, classes, and structures’ 라고 되어 있는데, 우리 말로 옮겼을 때 지원을 받는 것인지 지원을 하는 것인지 모호할 수 있기 때문에 자신이 지원을 하는 쪽이라는 의미에서 ‘보조용 열거체, 클래스 및 구조체’ 라고 옮겼습니다. 이들이 다른 타입의 내부에서 그 대상을 지원하는 ‘품어진 타입 (nested types)’ 입니다. <a href="#fnref:supporting-types" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:suits" role="doc-endnote">
      <p>영어로 ‘suit’ 에는 카드의 ‘패’ 라는 의미가 있으며, ‘다이아몬드’, ‘하트’ 등이 이 ‘suit’ 입니다. 서양 카드에는 4 종류의 ‘suits’ 가 있습니다. <a href="#fnref:suits" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:raw-value" role="doc-endnote">
      <p>여기서 ‘원시 값 (raw value)’ 는 스위프트의 열거체에서 ‘case’ 가 가질 수 있는 값을 말합니다. <a href="#fnref:raw-value" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:implicit" role="doc-endnote">
      <p>여기서 ‘implicit memberwise initializer’ 는 ‘멤버 초기자를 저절로’ 갖게 된다는 의미입니다. <a href="#fnref:implicit" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:refer-to" role="doc-endnote">
      <p>여기서 ‘참조할 수 있다’ 는 말은 ‘사용할 수 있다’ 는 의미입니다. 즉, <code class="highlighter-rouge">Suit.spades</code> 같이 타입을 직접 명시 하지 않고 <code class="highlighter-rouge">.spades</code> 같은 형태로도 사용할 수 있다는 의미입니다. <a href="#fnref:refer-to" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>
:ET